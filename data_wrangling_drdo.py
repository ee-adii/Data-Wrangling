# -*- coding: utf-8 -*-
"""Data_Wrangling_DRDO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pie7LopmLaAVQ1DtmaGUvCWeTzLJMr8T

##**Data wrangling**
######In this Notebook i handled a big dataset of pair of images(RGB and corresponding Infrared Image). I merged the two images into one, renaming and other processing tasks
"""

##traiing data

# Import libraries
import os
import time
 
# Insert the directory path in here
path_rgb = '/content/drive/MyDrive/BicycleGAN/images_rgb_train/data'
path_thermal = '/content/drive/MyDrive/BicycleGAN/images_thermal_train/data'
path_paired_train = "/content/drive/MyDrive/Paired_train"
path_paired_val = "/content/drive/MyDrive/Paired_val"
path_paired_test = "/content/drive/MyDrive/Paired_test"

# Extracting all the contents in the directory corresponding to path
#rgb_files = os.listdir(path_rgb)
#thermal_files = os.listdir(path_thermal)
paired_train_files = os.listdir(path_paired_train)
paired_val_files = os.listdir(path_paired_val)
paired_test_files = os.listdir(path_paired_test)

# for test data

# Import libraries
import os
import time

# Insert the directory path in here
path_rgb_tes = '/content/drive/MyDrive/FLIR ADAD v2_Test/video_rgb_test/data'
#path_thermal_tes = '/content/drive/MyDrive/FLIR ADAD v2_Test/video_thermal_test/data'

path_rgb_val = "/content/drive/MyDrive/rgb_val"
path_thermal_val ="/content/drive/MyDrive/images_thermal_val/data"

path_paired_tes = "/content/drive/MyDrive/Paired_test"
path_paired_val = "/content/drive/MyDrive/Paired_val"


#path_thermal_val = '/content/drive/MyDrive/BicycleGAN/images_thermal_val/data'
 
# Extracting all the contents in the directory corresponding to path
rgb_files_tes = os.listdir(path_rgb_tes)
#thermal_files_tes = os.listdir(path_thermal_tes)
paired_files_tes = os.listdir(path_paired_tes)
paired_files_val = os.listdir(path_paired_val)




thermal_files_val = os.listdir(path_thermal_val)

rgb_files_val = os.listdir(path_rgb_val)

"""
for renaming RGB images to only their Frame number 
"""
path = path_rgb_val+'/'
for i in range(0,len(rgb_files_val)):
#my_dest = str(rgb_files_tes[i][rgb_files_tes[i].index('frame'): rgb_files_tes[i].index('-',30)]) + ".jpg"
    my_dest = str(rgb_files_val[i][rgb_files_val[i].index("frame"):rgb_files_val[i].index("-",36)])+"_rgb"+ ".jpg"
    
    my_source =path + rgb_files_val[i]
    my_dest =path + my_dest
		# rename() function will
		# rename all the files
    os.rename(my_source, my_dest)

"""
for renaming thermal images to only their Frame number 
"""
path = path_thermal_tes+'/'
for i in range(0,len(thermal_files_tes)):
#my_dest = str(thermal_files_tes[i][thermal_files_tes[i].index('frame'): thermal_files_tes[i].index('-',30)]) + ".jpg"
    my_dest = str(thermal_files_tes[i][thermal_files_tes[i].index("frame"):thermal_files_tes[i].index("-",36)])+"_thermal" + ".jpg"
    my_source =path + thermal_files_tes[i]
    my_dest =path + my_dest
		# rename() function will
		# rename all the files
    os.rename(my_source, my_dest)

# Renaming thermal images in Paired_train directory AND changing the image extension
paired_train_files.sort()
path = path_paired_train+'/'

for i in range(0,len(paired_train_files)):
  if paired_train_files[i][11:14] == "Pre":
    my_dest = str(paired_train_files[i][0:10])+"_IR" + ".png"
    my_source =path + paired_train_files[i]
    my_dest =path + my_dest
    os.rename(my_source, my_dest) 
  
  if paired_train_files[i][11:14]== "RGB":
    my_dest = str(paired_train_files[i][0:10])+"_RGB" + ".png"
    my_source =path + paired_train_files[i]
    my_dest =path + my_dest
    os.rename(my_source, my_dest)

# Changing extension of Paired_Val images to png
paired_val_files.sort()
path = path_paired_val+'/'

for i in range(0,len(paired_val_files)):
  if paired_val_files[i][13:16] == "the":
    my_dest = str(paired_val_files[i][0:12])+"_IR" + ".png"
    my_source =path + paired_val_files[i]
    my_dest =path + my_dest
    os.rename(my_source, my_dest) 
  
  if paired_val_files[i][13:16]== "rgb":
    my_dest = str(paired_val_files[i][0:12])+"_RGB" + ".png"
    my_source =path + paired_val_files[i]
    my_dest =path + my_dest
    os.rename(my_source, my_dest) 

  print('Image-- ',i)

# Changing extension of Paired_Val images to png
paired_val_files.sort()
path = path_paired_val+'/'

for i in range(0,len(paired_val_files)):
  if paired_val_files[i][13:16] == "the":
    my_dest = str(paired_val_files[i][0:12])+"_IR" + ".png"
    my_source =path + paired_val_files[i]
    my_dest =path + my_dest
    os.rename(my_source, my_dest) 
  
  if paired_val_files[i][13:16]== "rgb":
    my_dest = str(paired_val_files[i][0:12])+"_RGB" + ".png"
    my_source =path + paired_val_files[i]
    my_dest =path + my_dest
    os.rename(my_source, my_dest) 

  print('Image-- ',i)

# Changing extension of Paired_test images to png
paired_test_files.sort()
path = path_paired_test+'/'

for i in range(0,len(paired_test_files)):
  if paired_test_files[i][13:16] == "the":
    my_dest = str(paired_test_files[i][0:12])+"_IR" + ".png"
    my_source =path + paired_test_files[i]
    my_dest =path + my_dest
    os.rename(my_source, my_dest) 
  
  if paired_test_files[i][13:16]== "rgb":
    my_dest = str(paired_test_files[i][0:12])+"_RGB" + ".png"
    my_source =path + paired_test_files[i]
    my_dest =path + my_dest
    os.rename(my_source, my_dest) 

  print('Image-- ',i)

"""
For pairing the images in one folder 
"""

thermal_files_val.sort()
rgb_files_val.sort()


import shutil

my_dest =''
for i in range(0,len(thermal_files_val)):
  for j in range(0,len(rgb_files_tes)):
    if thermal_files_val[i][:-12] == rgb_files_val[j][:-8]:


       """
       my_dest = str(thermal_files_tes[j][thermal_files_tes[j].index('frame'): thermal_files_tes[j].index('-',30)])+ "_thermal" + ".jpg"
       my_source =path_thermal_tes + thermal_files_tes[j]
       my_dest =path_thermal_tes + my_dest
       os.rename(my_source, my_dest)

       my_dest2 = str(rgb_files_tes[i][rgb_files_tes[i].index('frame'): rgb_files_tes[i].index('-',30)])+"_rgb" + ".jpg"
       my_source2 =path_rgb_tes + rgb_files_tes[j]
       my_dest2 =path_rgb_tes + my_dest
       os.rename(my_source2, my_dest2)
       """

       curr_dest = path_thermal_val+"/"+thermal_files_val[i]
       curr_dest2 = path_rgb_val+"/"+rgb_files_val[j]
       shutil.move(curr_dest, '/content/drive/MyDrive/Paired_val')
       shutil.move(curr_dest2, '/content/drive/MyDrive/Paired_val')

"""
for concatenation of data
"""

from PIL import Image
import os
import cv2 
from google.colab.patches import cv2_imshow
import os
import time
# Insert the directory path in here
#make sure image_path folder must have paired data set
image_path = '/content/drive/MyDrive/Paired_val'
destination_path = '/content/drive/MyDrive/concate_val'
destination_path_copy = '/content/drive/MyDrive/concate_val_copy' #for separate copy folder
# Extracting all the contents in the directory corresponding to path
img_files = os.listdir(image_path)
img_files.sort()
def hconcat_resize(img_list,
				interpolation
				= cv2.INTER_CUBIC):
	# take minimum hights
	h_min = min(img.shape[0]
				for img in img_list)
	
	# image resizing
	im_list_resize = [cv2.resize(img,
					(int(img.shape[1] * h_min / img.shape[0]),
						h_min), interpolation
								= interpolation)
					for img in img_list]
	# return final image
	return cv2.hconcat(im_list_resize)
def Concate():
  for i in range(0,len(img_files),2):
    img1 = cv2.imread(image_path+"/"+img_files[i])
    img2 = cv2.imread(image_path+"/"+img_files[i+1])
    # horizontally concatenates images
    # of same height
    im_h = hconcat_resize([img2, img1])

    im = Image.fromarray(im_h)
    im.save(destination_path+"/"+img_files[i][:12]+'.jpg')
    im.save(destination_path_copy+"/"+img_files[i][:12]+'.jpg')

    print(i-1)

Concate()

